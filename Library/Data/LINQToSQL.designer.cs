#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="library")]
	public partial class LINQToSQLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCatalogs(Catalogs instance);
    partial void UpdateCatalogs(Catalogs instance);
    partial void DeleteCatalogs(Catalogs instance);
    partial void InsertReaders(Readers instance);
    partial void UpdateReaders(Readers instance);
    partial void DeleteReaders(Readers instance);
    partial void InsertActions(Actions instance);
    partial void UpdateActions(Actions instance);
    partial void DeleteActions(Actions instance);
    #endregion
		
		public LINQToSQLDataContext() : 
				base(global::Data.Properties.Settings.Default.libraryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LINQToSQLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQToSQLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQToSQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQToSQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Catalogs> Catalogs
		{
			get
			{
				return this.GetTable<Catalogs>();
			}
		}
		
		public System.Data.Linq.Table<Readers> Readers
		{
			get
			{
				return this.GetTable<Readers>();
			}
		}
		
		public System.Data.Linq.Table<Actions> Actions
		{
			get
			{
				return this.GetTable<Actions>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Catalogs")]
	public partial class Catalogs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CatalogID;
		
		private string _Author;
		
		private string _Title;
		
		private EntitySet<Actions> _Actions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatalogIDChanging(int value);
    partial void OnCatalogIDChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Catalogs()
		{
			this._Actions = new EntitySet<Actions>(new Action<Actions>(this.attach_Actions), new Action<Actions>(this.detach_Actions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CatalogID
		{
			get
			{
				return this._CatalogID;
			}
			set
			{
				if ((this._CatalogID != value))
				{
					this.OnCatalogIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogID = value;
					this.SendPropertyChanged("CatalogID");
					this.OnCatalogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catalogs_Actions", Storage="_Actions", ThisKey="CatalogID", OtherKey="CatalogID")]
		public EntitySet<Actions> Actions
		{
			get
			{
				return this._Actions;
			}
			set
			{
				this._Actions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Actions(Actions entity)
		{
			this.SendPropertyChanging();
			entity.Catalogs = this;
		}
		
		private void detach_Actions(Actions entity)
		{
			this.SendPropertyChanging();
			entity.Catalogs = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Readers")]
	public partial class Readers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReaderID;
		
		private string _Name;
		
		private string _Surname;
		
		private EntitySet<Actions> _Actions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReaderIDChanging(int value);
    partial void OnReaderIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    #endregion
		
		public Readers()
		{
			this._Actions = new EntitySet<Actions>(new Action<Actions>(this.attach_Actions), new Action<Actions>(this.detach_Actions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReaderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReaderID
		{
			get
			{
				return this._ReaderID;
			}
			set
			{
				if ((this._ReaderID != value))
				{
					this.OnReaderIDChanging(value);
					this.SendPropertyChanging();
					this._ReaderID = value;
					this.SendPropertyChanged("ReaderID");
					this.OnReaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Readers_Actions", Storage="_Actions", ThisKey="ReaderID", OtherKey="ReaderID")]
		public EntitySet<Actions> Actions
		{
			get
			{
				return this._Actions;
			}
			set
			{
				this._Actions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Actions(Actions entity)
		{
			this.SendPropertyChanging();
			entity.Readers = this;
		}
		
		private void detach_Actions(Actions entity)
		{
			this.SendPropertyChanging();
			entity.Readers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Actions")]
	public partial class Actions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActionID;
		
		private string _ActionType;
		
		private System.Nullable<int> _CatalogID;
		
		private System.Nullable<int> _ReaderID;
		
		private EntityRef<Catalogs> _Catalogs;
		
		private EntityRef<Readers> _Readers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    partial void OnActionTypeChanging(string value);
    partial void OnActionTypeChanged();
    partial void OnCatalogIDChanging(System.Nullable<int> value);
    partial void OnCatalogIDChanged();
    partial void OnReaderIDChanging(System.Nullable<int> value);
    partial void OnReaderIDChanged();
    #endregion
		
		public Actions()
		{
			this._Catalogs = default(EntityRef<Catalogs>);
			this._Readers = default(EntityRef<Readers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ActionType
		{
			get
			{
				return this._ActionType;
			}
			set
			{
				if ((this._ActionType != value))
				{
					this.OnActionTypeChanging(value);
					this.SendPropertyChanging();
					this._ActionType = value;
					this.SendPropertyChanged("ActionType");
					this.OnActionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogID", DbType="Int")]
		public System.Nullable<int> CatalogID
		{
			get
			{
				return this._CatalogID;
			}
			set
			{
				if ((this._CatalogID != value))
				{
					if (this._Catalogs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatalogIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogID = value;
					this.SendPropertyChanged("CatalogID");
					this.OnCatalogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReaderID", DbType="Int")]
		public System.Nullable<int> ReaderID
		{
			get
			{
				return this._ReaderID;
			}
			set
			{
				if ((this._ReaderID != value))
				{
					if (this._Readers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReaderIDChanging(value);
					this.SendPropertyChanging();
					this._ReaderID = value;
					this.SendPropertyChanged("ReaderID");
					this.OnReaderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catalogs_Actions", Storage="_Catalogs", ThisKey="CatalogID", OtherKey="CatalogID", IsForeignKey=true)]
		public Catalogs Catalogs
		{
			get
			{
				return this._Catalogs.Entity;
			}
			set
			{
				Catalogs previousValue = this._Catalogs.Entity;
				if (((previousValue != value) 
							|| (this._Catalogs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Catalogs.Entity = null;
						previousValue.Actions.Remove(this);
					}
					this._Catalogs.Entity = value;
					if ((value != null))
					{
						value.Actions.Add(this);
						this._CatalogID = value.CatalogID;
					}
					else
					{
						this._CatalogID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Catalogs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Readers_Actions", Storage="_Readers", ThisKey="ReaderID", OtherKey="ReaderID", IsForeignKey=true)]
		public Readers Readers
		{
			get
			{
				return this._Readers.Entity;
			}
			set
			{
				Readers previousValue = this._Readers.Entity;
				if (((previousValue != value) 
							|| (this._Readers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Readers.Entity = null;
						previousValue.Actions.Remove(this);
					}
					this._Readers.Entity = value;
					if ((value != null))
					{
						value.Actions.Add(this);
						this._ReaderID = value.ReaderID;
					}
					else
					{
						this._ReaderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Readers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
